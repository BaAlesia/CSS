1994 - CSS
Хокон Виум Ли (из Норвегии) предложил концепцию каскадных таблиц стилей.
Способы подключения CSS:

В head HTML-документа нужно добавить link со ссылкой на файл .css:
<link rel="stylesheet" href="style.css">

В head HTML-документа нужно добавить тэг “style”:
<style>
 .example {
  background: #ebac0c;
 }
</style>

Через атрибут “style”
Чтобы стилизовать конкретный элемент, можно использовать атрибут “style”:

<div style="border: 1px solid #000; margin-top: 16px;">Див со стилем</div>
Синтаксис внутри атрибута совпадает с синтаксисом внутри фигурных скобок в селекторе CSS.

Синтаксис CSS
Синтаксис CSS состоит из двух частей: селекторы и свойства. Селекторами мы указываем элементы, а свойствами описываем их стиль.

Селекторы
Селектор это правило, по которому будут выбраны элементы — например, мы можем обратиться ко всем параграфам или картинкам. Как?

p {} img {}
Свойства
Свойства пишутся у конкретных селекторов между фигурными скобками в формате ключ: значение.

Сложно? Вот пример как сделать у всех параграфов красный цвет и подчёркивание:

p {
 color: red;
 text-decoration: underline;
}
Каждое новое свойство пишется с новой строки.

После каждого свойства необходимо ставить точку с зяпятой.
Синтаксис CSS: практика
Всё гениальное - просто. Чем проще инструмент, тем более он удобен и прекрасен. CSS - один из таких инструментов. 
Его синтакисис состоит всего из двух единиц: селекторы и свойства.

Простые селекторы
HTML-документ состоит из элементов (чем элементы отличаются от тегов, мы рассказали в этом уроке). Чтобы задать стили элементу, необходимо к нему обратиться - «выбрать» его.

Давай посмотрим на примере:

<p>Привет, о многоуважаемый ученик!</p>
p {
    color: red;
}

Что мы сделали? Мы раскрасили текст "Привет, о многоуважаемый ученик!" в красный цвет. Как мы это сделали? 
Мы обратились ко всем элементам <p> и задали им красный цвет текста. Такой селектор называется селектор по тегу.
Селекторы не всегда такие простые, в следующих шагах мы рассмотрим разные виды селекторов. В общем виде синтаксис можно представить следующим образом:
селектор {
 свойство: значение;
}

Типы селекторов
Это основные типы селекторов. Есть и более сложные, но их очень редко используют даже опытные разработчики. Потому что один из главных принципов в написании кода - KISS.

Каждый селектор имеет свою специфичность – если стили в разных селекторах будут конфликтовать, применятся они будут в порядке специфичности – от более специфичному к менее специфичному.

Подробнее об этом на MDN: https://developer.mozilla.org/ru/docs/Web/CSS/Specificity

По тегу
Самый простой селектор - выбирает элементы по их тегу:

h1 {
   /* стили для всех h1 */
}
Этот селектор выберет все элементы <h1>.

По классу
Самый часто используемый селектор — по классу. Задаём в HTML класс элементам, к которым применить стиль:
<div class="card">
 Карточка
</div>
И теперь эти элементы можно выбрать по имени класса. Имя селектора начинается с точки:
.card {
   /* стили для всех элементов с class="card" */
   background: #333; /* фон серого цвета */
}
По id
Задавать стили по id - дурной тон, старайся его избегать. Тут всё тоже самое, что и с классом, только атрибут называется id:
<button id="button-go-to-top">
 Наверх
</button>
И имя селектора начинается с решётки:

#button-go-to-top {
   /* стили для элемента с id="button-go-to-top" */
   text-decoration: underline; /* подчёркивание текста */
}
По атрибуту 
Не самый популярный селектор, но иногда он полезен:
<button data-my-custom-attribute="my-custom-value">
 Нажми на меня
</button>
 Имя и значение атрибута пишется в квадратных скобках. Работает с любым атрибутом:
[data-my-custom-attribute="my-custom-value"] {
   color: red;
}
Любой элемент
Селектор * выбирает абсолютно любой элемент. Самый непопулярный селектор, обычно используется для костылей. 
Вряд ли он будет часто тебе нужен. Просто знай, что он есть.
* {
  margin: 0;
}
/* абсолютно всем элементам будет установлен margin: 0 */

Составные селекторы
Составные селекторы состоят из комбинации простых.

Группировка селекторов
Один и тот же набор свойств можно применить к разным селекторам. Пример:

button,
.button,
.cta-button {}

Нужно просто указать  через запятую все селекторы, к которым ты хочешь применить стили.
Элемент с классом
Можно стилизовать конкретный элемент, если у него есть определённый класс. Примеры:

p.example {}
Селектор выберет все p, у которых есть класс example.
.main.active {}
Селектор выберет все элементы с классом main, у которых также есть и класс active. Пример такого элемента:
<div class="main active">Пример</div>

Вложенность
Эти селекторы используются для выбора элементов, которые вложены в другие элементы.
Вложенность на любом уровне
Если между двумя простыми селекторами стоит пробел и ничего больше, это означает вложенность на любом уровне. Пример:
.page p {
 text-decoration: underline;
}
Этот селектор применит подчёркиваение ко всем <p>, которые находятся внутри элемента с классом page на любом уровне вложенности.

<div class="page">
 <p>Как писал Пелевин:</p>
 <div class="quote">
  <p>
   Человек привык видеть дьявола везде, кроме зеркала и телевизора.
  </p>
 </div>
</div>
Результат:
Вложенность на первом уровне
Правая угловая скобка > обозначает вложенность на первом уровне. Пример:
.page > p {
 text-decoration: underline;
}
Этот селектор применится ко всем <p>, которые находятся внутри элемента с классом page на первом уровне вложенности.

Как понимать составные селекторы
Хороший способ понимать смысл составных селекторов - читать их справа налево.
Давай попробуем разобраться на примере:
.page > .part {}
Этот селектор выберет все элементы .part, которые находятся на первом уровне вложенности в .page.
Здесь и дальше, вместо того, чтобы писать «элемент с class="part"», мы будем писать просто .part - точка вначале подразумевает, что это имя класса.
Ещё пример:
.main .side-menu .menu-item {}
Селектор применится ко всем элементам .menu-item, которые находятся внутри элементов .side-menu, которые находятся внутри элементов .main.

Селекторы, которые идут дальше, используются редко. Если ты не запомнишь как они работают, ничего страшного - самое главное ты знаешь, 
что они есть. Если что,  сможешь загуглить их при необходимости или использовать этот урок как справочник.

Элементы с определенным атрибутом
Можно задавать стили в зависимости от конкретного значения конретного атрибута. Пример:
input[type="password"] {}
Этот селектор выберет все элементы <input type="password">
Первый соседний элемент
Для того, чтобы выбрать элемент, который находится сразу после другого элемента, используется знак +. Пример:
img + p {
 margin-top: 0;
 font-style: italic;
}
Этот код применит стили во всех <p>, идущих сразу после <img>:
<img src="https://www.google.ru/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png" />
<p>Это лого гугла</p>
<p>А это просто абзац</p>

Любой соседний элемент
Для того, чтобы выбрать элемент, который находится после другого элемента, используется знак ~. Пример:

img ~ p {
 margin-top: 0;
 font-style: italic;
}
Этот код применит стили во всех <p>, идущих после <img>, даже если между img и p есть другие элементы.

Тип отображения элемента (display)
В уроке «Элементы и их виды», мы узнали, что есть два типа элементов - блочные и строчные. Кратко: блочные элементы занимают всю доступную ширину и начинаются с новой строчки. Строчные занимают столько места по ширине, сколько занимает их содержимое, выстраиваются в одну строчку и переносятся, если им не хватает места.

С помощью CSS-свойства display можно переопределить тип отображения элемента. Оно может иметь одно из следующих значений.

display: none; - элемент перестаёт отображаться на странице.

display: block; - блочный элемент. Ему можно задать ширину, высоту, границы, отступы.

display: inline; - строчный элемент. Задание ширины и высоты не влияет на inline элементы. Задание границ и отступов будет изменять 
положение окружающего текста, но не будет влиять на положение окружающих блочных элементов.
display: inline-block; - что-то среднее между блочным и строчным элементом. Ему можно задать ширину, высоту, границы и отступы, 
но он не будет создавать перенос строки до и после себя, в отличие от блочных элементов. С помощью этого типа можно распологать блоки горизонтально в ряд.
flex и inline-flex - это флексбоксы. Про них расскажем в уроке «Flexbox» в модуле «Продвинутая вёрстка». 
Элементы внутри них располагаются по определённым правилам, но снаружи они ведут себя как блоки и инлайн-блоки соотвественно.
В дальнейшем элементы с display block, inline-block, flex и inline-flex мы будем называть просто «блоки».
Блочная модель в CSS
Блокам можно задать:
ширину (width) и высоту (height)
отступы: внутренние (padding) и внешние (margin)
границы (border)
Эти свойства вместе с содержимым элемента составляют его блочную модель
Вот так выглядит её блочная модель:
margin - внешний отступ;
border - граница, между внутренним и внешним;
padding - внутренний отступ, под этим отступом продолжается фон элемента;
content - содержимое элемента;
Кстати
Размеры блока с незаданной шириной и высотой определяются по формуле: margin + padding + border + content. Эту особенность используют, 
чтобы создавать гибкие компоненты, которые будут изменять свои размеры в соответствии с содержимым.

Единицы измерения
Как ты уже знаешь, в CSS свойства имеют значения. Размерные значения обычно имеют единицу измерения.
Например, пиксели:
.example {
   width: 100px;
}
Чтобы не заниматься копипастой, сразу дадим ссылку на ресурс, где хорошо про это рассказывается  https://learn.javascript.ru/css-units. 
Используй его как справочник, когда понадобится.
Об этом нигде не сказано, но любую единицу измерения можно использовать для задания любого свойства, которое отвечает за размер.
Например, с помощью vh можно задавать размер шрифта.
